<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="HorusStudio.Maui.MaterialDesignControls.MaterialInputBase"
             xmlns:converters="clr-namespace:HorusStudio.Maui.MaterialDesignControls.Converters"
             xmlns:material="clr-namespace:HorusStudio.Maui.MaterialDesignControls"
             x:Name="InputBase">
    <ContentView.Resources>
        <Thickness x:Key="DefaultHorizontalPadding">16,0</Thickness>
        <Thickness x:Key="DefaultVerticalPadding">0,8</Thickness>
        <Thickness x:Key="DefaultLeftPaddingWithIcon">12,0,0,0</Thickness>
        <Thickness x:Key="DefaultRightPaddingWithIcon">0,0,12,0</Thickness>
        <x:Double x:Key="DefaultIconSize">24</x:Double>
        <Thickness x:Key="DefaultSupportingTextMargin">16,4</Thickness>

        <converters:IsNotNullConverter x:Key="IsNotNull" />
        <converters:IsNotNullOrEmptyConverter x:Key="IsNotNullOrEmpty" />
        <converters:IsTrailingIconVisibleConverter x:Key="IsTrailingIconVisible" />

        <Style x:Key="MainContent" TargetType="StackLayout">
            <Setter Property="Orientation" Value="Horizontal" />
            <Setter Property="Spacing" Value="0" />
            <Setter Property="Margin" Value="{StaticResource DefaultVerticalPadding}" />
        </Style>
        
        <Style x:Key="FilledMainContent" TargetType="StackLayout" BaseResourceKey="MainContent">
            <Setter Property="Margin" Value="{OnPlatform Android='0,8,0,4', Default='0,8,0,6'}" />
            <Style.Triggers>
                <MultiTrigger TargetType="StackLayout">
                    <MultiTrigger.Conditions>
                        <BindingCondition Binding="{Binding IsFocused, Source={x:Reference InputBase}}" Value="false" />
                        <BindingCondition Binding="{Binding Text, Source={x:Reference InputBase}, Converter={StaticResource IsNotNullOrEmpty}}" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Margin" Value="{StaticResource DefaultVerticalPadding}" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FieldContainer" TargetType="Grid">
            <Setter Property="Margin" Value="{StaticResource DefaultHorizontalPadding}" />
            <Setter Property="HorizontalOptions" Value="FillAndExpand" />
            <Setter Property="RowSpacing" Value="0" />
        </Style>

        <Style x:Key="Placeholder" TargetType="Label">
            <Setter Property="VerticalTextAlignment" Value="Center" />
            <Setter Property="IsVisible" Value="false" />
            <Style.Triggers>
                <MultiTrigger TargetType="Label">
                    <MultiTrigger.Conditions>
                        <BindingCondition Binding="{Binding IsFocused, Source={x:Reference InputBase}}" Value="false" />
                        <BindingCondition Binding="{Binding Text, Source={x:Reference InputBase}, Converter={StaticResource IsNotNullOrEmpty}}" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="IsVisible" Value="true" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="SupportingText" TargetType="Label">
            <Setter Property="Margin" Value="{StaticResource DefaultSupportingTextMargin}" />
            <Setter Property="VerticalTextAlignment" Value="Center" />
            <Setter Property="IsVisible" Value="false" />
            <Style.Triggers>
                <DataTrigger TargetType="Label" Binding="{Binding SupportingText, Source={x:Reference InputBase}, Converter={StaticResource IsNotNullOrEmpty}}" Value="true">
                    <Setter Property="IsVisible" Value="true" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FilledHint" TargetType="Label">
            <Setter Property="HorizontalOptions" Value="Start" />
            <Setter Property="VerticalOptions" Value="Start" />
            <Setter Property="IsVisible" Value="true" />
            <Style.Triggers>
                <MultiTrigger TargetType="Label">
                    <MultiTrigger.Conditions>
                        <BindingCondition Binding="{Binding IsFocused, Source={x:Reference InputBase}}" Value="false" />
                        <BindingCondition Binding="{Binding Text, Source={x:Reference InputBase}, Converter={StaticResource IsNotNullOrEmpty}}" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="IsVisible" Value="false" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="OutlinedHint" TargetType="Label" BaseResourceKey="FilledHint">
        </Style>

        <Style x:Key="BaseIcon" TargetType="material:MaterialIconButton">
            <Setter Property="HeightRequest" Value="{StaticResource DefaultIconSize}" />
            <Setter Property="WidthRequest" Value="{StaticResource DefaultIconSize}" />
            <Setter Property="Padding" Value="0" />
        </Style>
        
        <Style x:Key="LeadingIcon" TargetType="material:MaterialIconButton" BaseResourceKey="BaseIcon">
            <Setter Property="Margin" Value="{StaticResource DefaultLeftPaddingWithIcon}" />
            <Style.Triggers>
                <DataTrigger TargetType="material:MaterialIconButton"
                             Binding="{Binding LeadingIconSource, Source={x:Reference InputBase}, Converter={StaticResource IsNotNull}}"
                             Value="true">
                    <Setter Property="IsVisible"
                            Value="true" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TrailingIcon" TargetType="material:MaterialIconButton" BaseResourceKey="BaseIcon">
            <Setter Property="Margin" Value="{StaticResource DefaultRightPaddingWithIcon}" />
            <Style.Triggers>
                <DataTrigger TargetType="material:MaterialIconButton" Value="true">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource IsTrailingIconVisible}">
                            <Binding Path="TrailingIconSource" Source="{x:Reference InputBase}" />
                            <Binding Path="HasError" Source="{x:Reference InputBase}" />
                            <Binding Path="ShowTrailingIconOnlyOnError" Source="{x:Reference InputBase}" />
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter Property="IsVisible" Value="true" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <ControlTemplate x:Key="FilledControlTemplate">
            <VerticalStackLayout Spacing="0" x:Name="ContainerFilled">
                <Border
                    x:Name="InputBorder"
                    HeightRequest="{Binding HeightRequest, Source={x:Reference InputBase}}"
                    Background="{Binding Background, Source={x:Reference InputBase}}"
                    StrokeThickness="0">

                    <Grid>
                        <StackLayout Style="{StaticResource FilledMainContent}">
                            <material:MaterialIconButton
                                Style="{StaticResource LeadingIcon}"
                                IconTintColor="{Binding LeadingIconTintColor, Source={x:Reference InputBase}}"
                                ImageSource="{Binding LeadingIconSource, Source={x:Reference InputBase}}"
                                Command="{Binding LeadingIconCommand, Source={x:Reference InputBase}}"
                                CommandParameter="{Binding LeadingIconCommandParameter, Source={x:Reference InputBase}}"
                                IsVisible="{Binding LeadingIconSource, Source={x:Reference InputBase}, Converter={StaticResource IsNotNull}}" />

                            <Grid Style="{StaticResource FieldContainer}">
                                <Grid Padding="0" Margin="{OnPlatform Android='-5,2,0,0', Default='0,2,0,0'}">
                                    <ContentPresenter VerticalOptions="End" />
                                    <Label
                                        Style="{StaticResource Placeholder}"
                                        TextColor="{Binding PlaceholderColor, Source={x:Reference InputBase}}"
                                        FontFamily="{Binding PlaceholderFontFamily, Source={x:Reference InputBase}}"
                                        FontSize="{Binding PlaceholderSize, Source={x:Reference InputBase}}"
                                        Text="{Binding Placeholder, Source={x:Reference InputBase}}"
                                        HorizontalTextAlignment="{Binding HorizontalTextAlignment, Source={x:Reference InputBase}}" />
                                </Grid>
                                <Label
                                    Style="{StaticResource FilledHint}"
                                    Text="{Binding Label, Source={x:Reference InputBase}}"
                                    TextColor="{Binding LabelColor, Source={x:Reference InputBase}}"
                                    FontFamily="{Binding LabelFontFamily, Source={x:Reference InputBase}}"
                                    LineBreakMode="{Binding LabelLineBreakMode, Source={x:Reference InputBase}}"
                                    Margin="{Binding LabelMargin, Source={x:Reference InputBase}}"
                                    Padding="{Binding LabelPadding, Source={x:Reference InputBase}}"
                                    FontSize="{Binding LabelSize, Source={x:Reference InputBase}}"
                                    HorizontalTextAlignment="{Binding HorizontalTextAlignment, Source={x:Reference InputBase}}" />
                            </Grid>

                            <material:MaterialIconButton
                                Style="{StaticResource TrailingIcon}"
                                IconTintColor="{Binding TrailingIconTintColor, Source={x:Reference InputBase}}"
                                ImageSource="{Binding TrailingIconSource, Source={x:Reference InputBase}}"
                                Command="{Binding TrailingIconCommand, Source={x:Reference InputBase}}"
                                CommandParameter="{Binding TrailingIconCommandParameter, Source={x:Reference InputBase}}">
                                <material:MaterialIconButton.IsVisible>
                                    <MultiBinding Converter="{StaticResource IsTrailingIconVisible}">
                                        <Binding Path="TrailingIconSource"
                                                 Source="{x:Reference InputBase}" />
                                        <Binding Path="HasError"
                                                 Source="{x:Reference InputBase}" />
                                        <Binding Path="ShowTrailingIconOnlyOnError"
                                                 Source="{x:Reference InputBase}" />
                                    </MultiBinding>
                                </material:MaterialIconButton.IsVisible>
                            </material:MaterialIconButton>
                        </StackLayout>

                        <BoxView HeightRequest="{Binding BorderWidth, Source={x:Reference InputBase}}" Color="{Binding BorderColor, Source={x:Reference InputBase}}" VerticalOptions="EndAndExpand" />
                    </Grid>
                </Border>

                <Label
                    Style="{StaticResource SupportingText}"
                    Text="{Binding SupportingText, Source={x:Reference InputBase}}"
                    TextColor="{Binding SupportingColor, Source={x:Reference InputBase}}"
                    FontFamily="{Binding SupportingFontFamily, Source={x:Reference InputBase}}"
                    Margin="{Binding SupportingMargin, Source={x:Reference InputBase}}"
                    FontSize="{Binding SupportingSize, Source={x:Reference InputBase}}"
                    LineBreakMode="{Binding SupportingLineBreakMode, Source={x:Reference InputBase}}"
                    HorizontalTextAlignment="{Binding HorizontalTextAlignment, Source={x:Reference InputBase}}" />
            </VerticalStackLayout>
        </ControlTemplate>

        <ControlTemplate x:Key="OutlinedControlTemplate">
            <VerticalStackLayout Spacing="0" x:Name="ContainerOutlined">
                <Grid>
                    <Border
                        x:Name="InputBorder"
                        Margin="0,8,0,0"
                        HeightRequest="{Binding HeightRequest, Source={x:Reference InputBase}}"
                        Stroke="{Binding BorderColor, Source={x:Reference InputBase}}"
                        Background="{Binding Background, Source={x:Reference InputBase}}"
                        StrokeThickness="{Binding BorderWidth, Source={x:Reference InputBase}}">

                        <StackLayout Style="{StaticResource MainContent}">
                            <material:MaterialIconButton
                                Style="{StaticResource LeadingIcon}"
                                IconTintColor="{Binding LeadingIconTintColor, Source={x:Reference InputBase}}"
                                ImageSource="{Binding LeadingIconSource, Source={x:Reference InputBase}}"
                                Command="{Binding LeadingIconCommand, Source={x:Reference InputBase}}"
                                CommandParameter="{Binding LeadingIconCommandParameter, Source={x:Reference InputBase}}"
                                IsVisible="{Binding LeadingIconSource, Source={x:Reference InputBase}, Converter={StaticResource IsNotNull}}" />

                            <Grid Padding="0" Margin="{OnPlatform Android='10,0,0,0', Default='16,0,0,0'}">
                                <ContentPresenter VerticalOptions="Center" />
                                <Label
                                    Style="{StaticResource Placeholder}"
                                    TextColor="{Binding PlaceholderColor, Source={x:Reference InputBase}}"
                                    FontFamily="{Binding PlaceholderFontFamily, Source={x:Reference InputBase}}"
                                    FontSize="{Binding PlaceholderSize, Source={x:Reference InputBase}}"
                                    Text="{Binding Placeholder, Source={x:Reference InputBase}}"
                                    HorizontalTextAlignment="{Binding HorizontalTextAlignment, Source={x:Reference InputBase}}" />
                            </Grid>

                            <material:MaterialIconButton
                                Style="{StaticResource TrailingIcon}"
                                IconTintColor="{Binding TrailingIconTintColor, Source={x:Reference InputBase}}"
                                ImageSource="{Binding TrailingIconSource, Source={x:Reference InputBase}}"
                                Command="{Binding TrailingIconCommand, Source={x:Reference InputBase}}"
                                CommandParameter="{Binding TrailingIconCommandParameter, Source={x:Reference InputBase}}">
                                <material:MaterialIconButton.IsVisible>
                                    <MultiBinding Converter="{StaticResource IsTrailingIconVisible}">
                                        <Binding Path="TrailingIconSource"
                                                 Source="{x:Reference InputBase}" />
                                        <Binding Path="HasError"
                                                 Source="{x:Reference InputBase}" />
                                        <Binding Path="ShowTrailingIconOnlyOnError"
                                                 Source="{x:Reference InputBase}" />
                                    </MultiBinding>
                                </material:MaterialIconButton.IsVisible>
                            </material:MaterialIconButton>
                        </StackLayout>
                    </Border>
                    <Label
                        x:Name="OutlinedHint"
                        Style="{StaticResource OutlinedHint}"
                        Text="{Binding Label, Source={x:Reference InputBase}}"
                        TextColor="{Binding LabelColor, Source={x:Reference InputBase}}"
                        FontSize="{Binding LabelSize, Source={x:Reference InputBase}}"
                        FontFamily="{Binding LabelFontFamily, Source={x:Reference InputBase}}"
                        Margin="{Binding LabelMargin, Source={x:Reference InputBase}}"
                        Padding="{Binding LabelPadding, Source={x:Reference InputBase}}"
                        LineBreakMode="{Binding LabelLineBreakMode, Source={x:Reference InputBase}}"
                        HorizontalTextAlignment="{Binding HorizontalTextAlignment, Source={x:Reference InputBase}}" />
                </Grid>

                <Label
                    Style="{StaticResource SupportingText}"
                    Text="{Binding SupportingText, Source={x:Reference InputBase}}"
                    TextColor="{Binding SupportingColor, Source={x:Reference InputBase}}"
                    FontFamily="{Binding SupportingFontFamily, Source={x:Reference InputBase}}"
                    Margin="{Binding SupportingMargin, Source={x:Reference InputBase}}"
                    FontSize="{Binding SupportingSize, Source={x:Reference InputBase}}"
                    LineBreakMode="{Binding SupportingLineBreakMode, Source={x:Reference InputBase}}"
                    HorizontalTextAlignment="{Binding HorizontalTextAlignment, Source={x:Reference InputBase}}" />
            </VerticalStackLayout>
        </ControlTemplate>

    </ContentView.Resources>
</ContentView>