<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="HorusStudio.Maui.MaterialDesignControls.MaterialInputBase"
             xmlns:converters="clr-namespace:HorusStudio.Maui.MaterialDesignControls.Converters"
             xmlns:material="clr-namespace:HorusStudio.Maui.MaterialDesignControls"
             x:Name="InputBase">
    <ContentView.Resources>
        <Thickness x:Key="DefaultHorizontalPadding">16,0</Thickness>
        <Thickness x:Key="DefaultVerticalPadding">0,8</Thickness>
        <Thickness x:Key="DefaultLeftPaddingWithIcon">12,0,0,0</Thickness>
        <Thickness x:Key="DefaultRightPaddingWithIcon">0,0,12,0</Thickness>
        <x:Double x:Key="DefaultIconSize">24</x:Double>

        <converters:IsNotNullConverter x:Key="IsNotNull" />
        <converters:IsNotNullOrEmptyConverter x:Key="IsNotNullOrEmpty" />
        <converters:TrailingIconIsVisibleConverter x:Key="IsTrailingIconVisible" />
        <converters:TrailingIconSourceConverter x:Key="TrailingIconSource" />
        
        <Style x:Key="MainBorder" TargetType="material:BorderButton">
            <Setter Property="HeightRequest" Value="{Binding HeightRequest, Source={x:Reference InputBase}}" />
            <Setter Property="Background" Value="{Binding Background, Source={x:Reference InputBase}}" />
        </Style>
        
        <Style x:Key="FilledBorder" TargetType="material:BorderButton" BaseResourceKey="MainBorder">
            <Setter Property="StrokeThickness" Value="0" />
        </Style>
        
        <Style x:Key="OutlinedBorder" TargetType="material:BorderButton" BaseResourceKey="MainBorder">
            <Setter Property="Margin" Value="0,8,0,0" />
            <Setter Property="Stroke" Value="{Binding BorderColor, Source={x:Reference InputBase}}" />
            <Setter Property="StrokeThickness" Value="{Binding InternalBorderWidth, Source={x:Reference InputBase}}" />
        </Style>
        
        <Style x:Key="MainContent" TargetType="StackLayout">
            <Setter Property="Orientation" Value="Horizontal" />
            <Setter Property="Spacing" Value="0" />
            <Setter Property="Margin" Value="{StaticResource DefaultVerticalPadding}" />
        </Style>
        
        <Style x:Key="FilledMainContent" TargetType="StackLayout" BaseResourceKey="MainContent">
            <Setter Property="Margin" Value="{OnPlatform Android='0,8,0,4', Default='0,8,0,6'}" />
            <Style.Triggers>
                <MultiTrigger TargetType="StackLayout">
                    <MultiTrigger.Conditions>
                        <BindingCondition Binding="{Binding IsFocused, Source={x:Reference InputBase}}" Value="false" />
                        <BindingCondition Binding="{Binding Text, Source={x:Reference InputBase}, Converter={StaticResource IsNotNullOrEmpty}}" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Margin" Value="{StaticResource DefaultVerticalPadding}" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FieldContainer" TargetType="Grid">
            <Setter Property="Margin" Value="{StaticResource DefaultHorizontalPadding}" />
            <Setter Property="HorizontalOptions" Value="FillAndExpand" />
            <Setter Property="RowSpacing" Value="0" />
        </Style>
        
        <Style x:Key="FilledFieldContainer" TargetType="Grid" BaseResourceKey="FieldContainer">
            <Setter Property="Margin" Value="{OnPlatform Android='-5,2,0,0', Default='0,2,0,0'}" />
        </Style>
        
        <Style x:Key="OutlinedFieldContainer" TargetType="Grid" BaseResourceKey="FieldContainer">
            <Setter Property="Margin" Value="{OnPlatform Android='10,0,16,0', Default='14,0,16,0'}" />
        </Style>

        <Style x:Key="Placeholder" TargetType="Label">
            <Setter Property="Margin" Value="{OnPlatform Android='4,0,0,0', Default=0}" />
            <Setter Property="TextColor" Value="{Binding PlaceholderColor, Source={x:Reference InputBase}}" />
            <Setter Property="FontFamily" Value="{Binding PlaceholderFontFamily, Source={x:Reference InputBase}}" />
            <Setter Property="FontSize" Value="{Binding PlaceholderSize, Source={x:Reference InputBase}}" />
            <Setter Property="LineBreakMode" Value="{Binding PlaceholderLineBreakMode, Source={x:Reference InputBase}}" />
            <Setter Property="Text" Value="{Binding Placeholder, Source={x:Reference InputBase}}" />
            <Setter Property="HorizontalTextAlignment" Value="{Binding HorizontalTextAlignment, Source={x:Reference InputBase}}" />
            <Setter Property="VerticalTextAlignment" Value="Center" />
            <Setter Property="IsVisible" Value="false" />
            <Style.Triggers>
                <MultiTrigger TargetType="Label">
                    <MultiTrigger.Conditions>
                        <BindingCondition Binding="{Binding IsFocused, Source={x:Reference InputBase}}" Value="false" />
                        <BindingCondition Binding="{Binding Text, Source={x:Reference InputBase}, Converter={StaticResource IsNotNullOrEmpty}}" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="IsVisible" Value="true" />
                </MultiTrigger>
                <MultiTrigger TargetType="Label">
                    <MultiTrigger.Conditions>
                        <BindingCondition Binding="{Binding Type, Source={x:Reference InputBase}}" Value="Filled" />
                        <BindingCondition Binding="{Binding AlwaysShowLabel, Source={x:Reference InputBase}}" Value="true" />
                    </MultiTrigger.Conditions>
                    <Setter Property="VerticalTextAlignment" Value="End" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="SupportingText" TargetType="Label">
            <Setter Property="VerticalTextAlignment" Value="Center" />
            <Setter Property="HorizontalTextAlignment" Value="{Binding HorizontalTextAlignment, Source={x:Reference InputBase}}" />
            <Setter Property="LineBreakMode" Value="{Binding SupportingLineBreakMode, Source={x:Reference InputBase}}" />
            <Setter Property="FontSize" Value="{Binding SupportingSize, Source={x:Reference InputBase}}" />
            <Setter Property="Margin" Value="{Binding SupportingMargin, Source={x:Reference InputBase}}" />
            <Setter Property="FontFamily" Value="{Binding SupportingFontFamily, Source={x:Reference InputBase}}" />
            <Setter Property="TextColor" Value="{Binding SupportingColor, Source={x:Reference InputBase}}" />
            <Setter Property="Text" Value="{Binding SupportingText, Source={x:Reference InputBase}}" />
            <Setter Property="IsVisible" Value="{Binding SupportingText, Source={x:Reference InputBase}, Converter={StaticResource IsNotNullOrEmpty}}" />
        </Style>

        <Style x:Key="Hint" TargetType="Label">
            <Setter Property="Text" Value="{Binding Label, Source={x:Reference InputBase}}" />
            <Setter Property="TextColor" Value="{Binding LabelColor, Source={x:Reference InputBase}}" />
            <Setter Property="FontFamily" Value="{Binding LabelFontFamily, Source={x:Reference InputBase}}" />
            <Setter Property="LineBreakMode" Value="{Binding LabelLineBreakMode, Source={x:Reference InputBase}}" />
            <Setter Property="Margin" Value="{Binding LabelMargin, Source={x:Reference InputBase}}" />
            <Setter Property="Padding" Value="{Binding LabelPadding, Source={x:Reference InputBase}}" />
            <Setter Property="FontSize" Value="{Binding LabelSize, Source={x:Reference InputBase}}" />
            <Setter Property="HorizontalTextAlignment" Value="{Binding HorizontalTextAlignment, Source={x:Reference InputBase}}" />
            <Setter Property="HorizontalOptions" Value="Start" />
            <Setter Property="VerticalOptions" Value="Start" />
            <Setter Property="IsVisible" Value="true" />
            <Style.Triggers>
                <MultiTrigger TargetType="Label">
                    <MultiTrigger.Conditions>
                        <BindingCondition Binding="{Binding IsFocused, Source={x:Reference InputBase}}" Value="false" />
                        <BindingCondition Binding="{Binding Text, Source={x:Reference InputBase}, Converter={StaticResource IsNotNullOrEmpty}}" Value="false" />
                        <BindingCondition Binding="{Binding AlwaysShowLabel, Source={x:Reference InputBase}}" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="IsVisible" Value="false" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="BaseIcon" TargetType="material:MaterialIconButton">
            <Setter Property="HeightRequest" Value="{StaticResource DefaultIconSize}" />
            <Setter Property="WidthRequest" Value="{StaticResource DefaultIconSize}" />
            <Setter Property="HorizontalOptions" Value="Center" />
            <Setter Property="VerticalOptions" Value="Center" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="CornerRadius" Value="0" />
        </Style>
        
        <Style x:Key="LeadingIcon" TargetType="material:MaterialIconButton" BaseResourceKey="BaseIcon">
            <Setter Property="Margin" Value="{StaticResource DefaultLeftPaddingWithIcon}" />
            <Setter Property="IconTintColor" Value="{Binding LeadingIconTintColor, Source={x:Reference InputBase}}" />
            <Setter Property="Command" Value="{Binding LeadingIconCommand, Source={x:Reference InputBase}}" />
            <Setter Property="CommandParameter" Value="{Binding LeadingIconCommandParameter, Source={x:Reference InputBase}}" />
            <Setter Property="ImageSource" Value="{Binding LeadingIcon, Source={x:Reference InputBase}}" />
            <Setter Property="IsVisible" Value="{Binding LeadingIcon, Source={x:Reference InputBase}, Converter={StaticResource IsNotNull}}" />
        </Style>
        
        <Style x:Key="TrailingIcon" TargetType="material:MaterialIconButton" BaseResourceKey="BaseIcon">
            <Setter Property="Margin" Value="{StaticResource DefaultRightPaddingWithIcon}" />
            <Setter Property="IconTintColor" Value="{Binding TrailingIconTintColor, Source={x:Reference InputBase}}" />
            <Setter Property="Command" Value="{Binding TrailingIconCommand, Source={x:Reference InputBase}}" />
            <Setter Property="CommandParameter" Value="{Binding TrailingIconCommandParameter, Source={x:Reference InputBase}}" />
            <Setter Property="ImageSource">
                <MultiBinding Converter="{StaticResource TrailingIconSource}">
                    <Binding Path="TrailingIcon" Source="{x:Reference InputBase}" />
                    <Binding Path="HasError" Source="{x:Reference InputBase}" />
                    <Binding Path="ErrorIcon" Source="{x:Reference InputBase}" />
                </MultiBinding>
            </Setter>
            <Setter Property="IsVisible">
                <MultiBinding Converter="{StaticResource IsTrailingIconVisible}">
                    <Binding Path="TrailingIcon" Source="{x:Reference InputBase}" />
                    <Binding Path="HasError" Source="{x:Reference InputBase}" />
                    <Binding Path="ErrorIcon" Source="{x:Reference InputBase}" />
                </MultiBinding>
            </Setter>
        </Style>
        
        <ControlTemplate x:Key="FilledControlTemplate">
            <VerticalStackLayout Spacing="0" x:Name="ContainerFilled">
                <material:BorderButton x:Name="InputBorder" Style="{StaticResource FilledBorder}">
                    <Grid>
                        <StackLayout Style="{StaticResource FilledMainContent}">
                            <material:MaterialIconButton Style="{StaticResource LeadingIcon}" />

                            <Grid Style="{StaticResource FieldContainer}">
                                <Grid Style="{StaticResource FilledFieldContainer}">
                                    <ContentPresenter VerticalOptions="End" />
                                    <Label Style="{StaticResource Placeholder}" />
                                </Grid>
                                <Label Style="{StaticResource Hint}" />
                            </Grid>

                            <material:MaterialIconButton Style="{StaticResource TrailingIcon}" />
                        </StackLayout>

                        <BoxView HeightRequest="{Binding InternalBorderWidth, Source={x:Reference InputBase}}" Color="{Binding BorderColor, Source={x:Reference InputBase}}" VerticalOptions="EndAndExpand" />
                    </Grid>
                </material:BorderButton>

                <Label Style="{StaticResource SupportingText}" />
            </VerticalStackLayout>
        </ControlTemplate>

        <ControlTemplate x:Key="OutlinedControlTemplate">
            <VerticalStackLayout Spacing="0" x:Name="ContainerOutlined">
                <Grid>
                    <material:BorderButton x:Name="InputBorder" Style="{StaticResource OutlinedBorder}">
                        <StackLayout Style="{StaticResource MainContent}">
                            <material:MaterialIconButton Style="{StaticResource LeadingIcon}" />
                            
                            <Grid Style="{StaticResource OutlinedFieldContainer}">
                                <ContentPresenter VerticalOptions="Center" />
                                <Label Style="{StaticResource Placeholder}" />
                            </Grid>

                            <material:MaterialIconButton Style="{StaticResource TrailingIcon}" />
                        </StackLayout>
                    </material:BorderButton>
                    <Label x:Name="OutlinedHint" Style="{StaticResource Hint}" />
                </Grid>

                <Label Style="{StaticResource SupportingText}" />
            </VerticalStackLayout>
        </ControlTemplate>

    </ContentView.Resources>
</ContentView>